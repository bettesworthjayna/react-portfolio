// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import express, {Request, Response} from 'express';


const router = express.Router();

/**
 * @description Creates cloud run service from gcp platform.
 * @param {Request}     req Incoming request
 * @param {Response}    res Outgoing response
 * @returns {Response}      A 200 status indicates the API is healthy and running
 */


router.post('/', async (req: Request, res: Response) => {
    const { description, image, id} = req.query;
    /**
   *  Required. The location and project in which this service should be created.
   *  Format: projects/{project}/locations/{location}, where {project} can be
   *  project id or number. Only lowercase characters, digits, and hyphens.
   */
   const parent = 'projects/bkzge7-dev/locations/northamerica-northeast2'
  /**
   *  Required. The Service instance to create.
   */
   const service = {
    name: "",
    description: description,
    labels: { },
    annotations: { },
    client: "gcloud",
    clientVersion: "438.0.0",
    ingress: "INGRESS_TRAFFIC_ALL",
    launchStage: "GA",
    binaryAuthorization: null,
    template: {
        labels: {},
        annotations: { },
        scaling: {
            minInstanceCount: 0,
             maxInstanceCount: 80
        },
        timeout: { seconds: '300', nanos: 0 },
        serviceAccount: "55162061854-compute@developer.gserviceaccount.com",
        containers: [
            {
                name: "",
                image: image , //"us-central1-docker.pkg.dev/bkzge7-dev/cloud-run-source-deploy/test-cloud-run-repository/test-cloud-run-repository:1bf02a6f710726ae682134a91df91df6237a8bd8"
                command: [],
                args: [],
                env: [],
                resources: {
                    limits:{"cpu":"1000m","memory":"512Mi"},
                    cpuIdle:true,
                    startupCpuBoost:false
                },
                ports: [
                  {
                    name:"http1",
                    containerPort:8080
                  }
                ],
                volumeMounts: [],
                workingDir: "",
                livenessProbe: null,
                startupProbe: {
                    initialDelaySeconds:20,
                    timeoutSeconds:240,
                    periodSeconds:240,
                    failureThreshold:3,
                    tcpSocket:{"port":8080},
                    probeType:"tcpSocket"}
            }
        ],
        volumes: [],
        executionEnvironment: "EXECUTION_ENVIRONMENT_UNSPECIFIED",
        encryptionKey: "",
        maxInstanceRequestConcurrency: 80,
        sessionAffinity: false
    },
    traffic: [
      {
        type:"TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST",
        revision:"",
        percent:100,
        tag:""
      }
    ],
    
    customAudiences: []

  }
  /**
   *  Required. The unique identifier for the Service. It must begin with letter,
   *  and cannot end with hyphen; must contain fewer than 50 characters.
   *  The name of the service becomes {parent}/services/{service_id}.
   */
  const serviceId = id
  
  const {ServicesClient} = require('@google-cloud/run').v2;

  // Instantiates a client
  const runClient = new ServicesClient();
 
  try{
    // Construct request
    const request = {
      parent,
      service,
      serviceId,
    };
    // Run request
    const [operation] = await runClient.createService(request);
    const [response] = await operation.promise();
    return res.json({status: "200", response: response, uri:  response.uri})
  }catch{
    return res.json({status: "400", response: "unable to create application"})
  }
})

module.exports = router;
